# -*- coding: utf-8 -*-
"""Question_generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V9YmZnhzK4GBwpV4xLSoxtRV9sr5Ax_f
"""

# Install the necessary libraries.
!pip install transformers torch gradio

from transformers import pipeline
import re
import gradio as gr
import time

# STEP 1: Loading the question generation pipeline.
question_generator = pipeline(
    "text2text-generation",
    model="allenai/t5-small-squad2-question-generation",
    device=-1 # Using -1 for CPU, or we can use 0 for GPU.
)

# STEP 2: Defining the core question generation logic.
def generate_questions_from_text(text_to_analyze):
    if not text_to_analyze:
        return []

    # Split the text into sentences.
    sentences = re.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?)\s', text_to_analyze)
    sentences = [s.strip() for s in sentences if s.strip()]

    all_generated_questions = []

    # Generate a question for each sentence.
    for sentence in sentences:
        if len(sentence) > 20:
            generated_output = question_generator(sentence)
            question_string = generated_output[0]['generated_text']
            all_generated_questions.append(question_string)

    return all_generated_questions

# STEP 3: Defining the main function that generates the UI and handles errors.
def generate_quiz(text_to_analyze, progress=gr.Progress()):
    # Showing progress bar with an initial step.
    progress(0.2, desc="Generating questions...")

    try:
        questions = generate_questions_from_text(text_to_analyze)

        if not questions:
            # If no questions are generated, return an informative message.
            return "No meaningful questions could be generated from the provided text."

        # Building the HTML/Markdown for the quiz interface.
        quiz_html = "<h2>Quiz Questions</h2>"
        for i, question in enumerate(questions):
            quiz_html += f"<div><h4>{i+1}. {question}</h4>"
            quiz_html += f"<textarea placeholder='' style='width: 100%; height: 80px;'></textarea></div>"

        # Mark progress as complete.
        progress(1.0, desc="Quiz ready!")
        return quiz_html

    except Exception as e:
        # Return an error message if anything goes wrong.
        return f"An error occurred: {e}"

# STEP 4: Create and launch the Gradio interface.
with gr.Blocks() as demo:
    gr.Markdown("# Interactive Quiz Generator")
    gr.Markdown("Paste your lesson text below to generate a quiz.")

    text_input = gr.Textbox(
        label="Lesson Text",
        lines=10,
        placeholder="Paste your lesson text here..."
    )

    generate_button = gr.Button("Generate Quiz")
    quiz_output = gr.HTML()

    generate_button.click(
        fn=generate_quiz,
        inputs=text_input,
        outputs=quiz_output
    )

demo.launch(share=True)